; Cmput 325 Winter 2019 Assignment 2
; Public test cases
; Martin Mueller

; How to use:
; First, load your assignment solution into SBCL
; Second, load this file.
; Third, fix the bugs and run this file again
; You can also copy+paste individual tests from here into SBCL

(defun test-case (ID Test Result)
    (if (equal Test Result)
        (format t "Test ~S OK" ID)
        (format t "FAIL: Test ~S expected ~S got ~S" ID Result Test)
    )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 1. remove-identities

; basic tests for +
(test-case '1.1.1 (remove-identities '(+ x 0)) 'x)
(test-case '1.1.2 (remove-identities '(+ 0 x)) 'x)
(test-case '1.1.3 (remove-identities '(+ 0 0)) 0)
(test-case '1.1.4 (remove-identities '(+ x x)) '(+ x x))

(test-case '1.1.5 (remove-identities '(+ (+ x 0) 0)) 'x)
(test-case '1.1.6 (remove-identities '(+ (+ 0 0) 0)) 0)
(test-case '1.1.7 (remove-identities '(+ (+ 5 0) 1)) '(+ 5 1))

; basic tests for -
(test-case '1.2.1 (remove-identities '(- x 0)) 'x)
(test-case '1.2.2 (remove-identities '(- 0 x)) '(- 0 x))
(test-case '1.2.3 (remove-identities '(- 0 0)) 0)
(test-case '1.2.4 (remove-identities '(- x x)) '(- x x))

(test-case '1.2.5 (remove-identities '(- (- x 0) 0)) 'x)
(test-case '1.2.6 (remove-identities '(- (- 0 0) 0)) 0)
(test-case '1.2.7 (remove-identities '(- (- 5 0) 1)) '(- 5 1))

; basic tests for *
(test-case '1.3.1 (remove-identities '(* x 1)) 'x)
(test-case '1.3.2 (remove-identities '(* 1 x)) 'x)
(test-case '1.3.3 (remove-identities '(* 1 1)) 1)
(test-case '1.3.4 (remove-identities '(* x x)) '(* x x))

(test-case '1.3.5 (remove-identities '(* (* x 1) 1)) 'x)
(test-case '1.3.6 (remove-identities '(* (* 1 1) 1)) 1)
(test-case '1.3.7 (remove-identities '(* (* 5 1) 0)) '(* 5 0))

; basic tests for mixing +, -, *
(test-case '1.4.1 (remove-identities '(+ 0 (* x 1))) 'x)
(test-case '1.4.2 (remove-identities '(+ (+ 0 0) (* 5 1))) 5)
(test-case '1.4.3 (remove-identities '(- 10 (+ 0 (* 0 1)))) 10)
(test-case '1.4.4 (remove-identities '(- 10 10)) '(- 10 10))
(test-case '1.4.5 (remove-identities '(- 10 10)) '(- 10 10))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 2. tests for simplify-zeroes

(test-case 2.1 (simplify-zeroes 0) 0)
(test-case 2.2 (simplify-zeroes '(* x 0)) 0)
(test-case 2.3 (simplify-zeroes '(* x (+ 0 0)))
               '(* x (+ 0 0)))
; It cannot simplify (+ 0 0) to 0

(test-case 2.4 (simplify-zeroes '(* x (* 0 0))) 0)
; It can simplify this

(test-case 2.5 (simplify-zeroes '(- x x)) 0)
(test-case 2.6 (simplify-zeroes '(- (* 5 (+ 2 x)) (* 5 (+ 2 x)))) 0)
(test-case 2.7 (simplify-zeroes '(- (* 5 (+ 2 x)) (* 5 (+ x 2))))
               '(- (* 5 (+ 2 x)) (* 5 (+ x 2))))
; It does not simplify, (+ 2 x) and (+ x 2) look different

(test-case 2.8 (simplify-zeroes '(* 0 x)) 0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 3. tests for simplify
;Some examples where one type of simplification enables the other.
;All the examples from question 1 and 2 should still be simplified 
;at least as much as before, too.

(test-case 3.1 (simplify 0) 0)
(test-case 3.2 (simplify '(* x 0)) 0)
(test-case 3.3 (simplify '(* x (+ 0 0))) 0)
; remove-identities reduces this to (* x 0). Then simplify-zeroes does the rest.

(test-case 3.4 (simplify '(- x x)) 0)
(test-case 3.5 (simplify '(- (* 5 (+ 2 x)) (* 5 (+ 2 x)))) 0)
(test-case 3.6 (simplify '(- (* 5 (+ 2 x)) (* 5 (+ x 2))))
               '(- (* 5 (+ 2 x)) (* 5 (+ x 2))))
(test-case 3.7 (simplify '(* (+ 5 0) (- 9 9))) 0)
(test-case 3.8 (simplify '(+ (+ 5 0) (- 4 9)))
               '(+ 5 (- 4 9))
)

(test-case 3.9 (simplify '(* 0 x)) 0)
(test-case 3.10 (simplify '(* (- 9 9) (+ 5 0))) 0)
(test-case 3.11 (simplify '(+ (+ 1 0) (* 0 (+ 0 x)))) 1)
(test-case 3.12 (simplify '(+ (+ 0 0) (+ 1 (- x x)))) 1)
(test-case 3.13 (simplify '(+ 1 (- x x))) 1)
(test-case 3.14 (simplify '(+ (- (+ x (* 5 (- 9 (+ 9 (* 0 x))))) x) (- (+ x (* 5 (- 9 (+ 9 (* 0 x))))) x))) 0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 4. tests for normalize

(test-case 4.1 (normalize '((5 . 10) (3 . 4) (7 . 0)))
               '((5 . 10) (3 . 4) (7 . 0)))

(test-case 4.2 (normalize '((5 . 2) (7 . 0) (3 . 1)))
               '((5 . 2) (3 . 1) (7 . 0)))

(test-case 4.3 (normalize '((5 . 3) (0 . 2) (3 . 1) (7 . 0)))
               '((5 . 3) (3 . 1) (7 . 0)))

(test-case 4.4 (normalize '((0 . 0))) NIL)

(test-case 4.5 (normalize '((5 . 2) (7 . 0) (1 . 11111) (-9 . 2) (3 . 0) 
                            (3 . 1) (-1 . 11111) (0 . 1)))
               '((-4 . 2) (3 . 1) (10 . 0)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 5. tests for polynomial

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 5.1 tests for poly-add

(test-case '5.1.1
    (poly-add '((5 . 2) (3 . 1) (7 . 0)) 
              '((5 . 2) (3 . 1) (7 . 0)))
    '((10 . 2) (6 . 1) (14 . 0))
)

(test-case '5.1.2
    (poly-add '((5 . 2) (3 . 1) (7 . 0)) nil)
    '((5 . 2) (3 . 1) (7 . 0))
)

(test-case '5.1.3
    (poly-add '((-9 . 0)) '((5 . 0)))
    '((-4 . 0))
)

(test-case '5.1.4
    (poly-add '((5 . 2) (3 . 1) (7 . 0)) '((5 . 3) (3 . 1) (7 . 0)))
    '((5 . 3) (5 . 2) (6 . 1) (14 . 0))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 5.1 tests for poly-subtract

(test-case '5.1.5
    (poly-subtract '((5 . 2) (3 . 1) (7 . 0)) 
                   '((5 . 2) (3 . 1) (7 . 0)))
    NIL
)

(test-case '5.1.6
    (poly-subtract '((-9 . 0)) '((5 . 0)))
    '((-14 . 0))
)

(test-case '5.1.7
    (poly-subtract '((5 . 2) (3 . 1) (7 . 0))
                   '((5 . 3) (3 . 1) (7 . 0)))
    '((-5 . 3) (5 . 2))
)




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 6 tests for print-pexpr

(test-case 6.1
    (print-pexpr '((23 . 0)))
    "23"
)

(test-case 6.2
    (print-pexpr '((1 . 1) (-5 . 0)))
    "x - 5"
)

(test-case 6.3
    (print-pexpr '((5 . 3) (5 . 1)))
    "5x^3 + 5x"
)

(test-case 6.4
    (print-pexpr '((-1 . 10) (-23 . 0)))
    "-x^10 - 23"
)

(test-case 6.5
    (print-pexpr '((-1 . 1) (-1 . 0)))
    "-x - 1"
)

(test-case 6.6
    (print-pexpr '((-1 . 0)))
    "-1"
)

(test-case 6.7
    (print-pexpr nil)
    "0"
)

(test-case 6.8
    (print-pexpr '((1 . 100)))
    "x^100"
)

; Examples of BAD output of print-pexpr:
; 1 + 1 (cannot happen with input in normal form)
; x + x^2 (wrong order)
; 1x (just write x)
; -1x (just write -x)
; x + 0 (no + 0, cannot happen with input in normal form)
; 0x + 5 (just write 5, cannot happen with input in normal form)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
